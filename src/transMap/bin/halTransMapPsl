#!/usr/bin/env python

import argparse, os, sys
# program-relative import magic
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from transMapLib import IntermediateFiles, ProgRunner

description="""Implement TransMap algorithm on top of halLiftover.
This is temporary until the functionality can be added to HAL.  It uses
simpleChain to chain the HAL blocks together.
"""

def cmdParse():
    "parse command line and return arguments object"
    parser = argparse.ArgumentParser(description="""Take various files that indicate what is know about TARGET data and metadata and correlate into a report.""")
    parser.add_argument("--verbose", action="store_true", help="""trace execution""")
    parser.add_argument("--filterInfo", type=str, help="""write statistics about chained alignments to this file""")
    parser.add_argument("--intermediateFilePrefix", type=str, help="""save intermediate files naming with this prefix, normally they are created in TMPDIR and then purged""")
    parser.add_argument("--localNearBestFilter", type=float, help="""use this localNearBest filter of post-chained alignments""")
    parser.add_argument("hal", type=str, help="""HAL file containing alignments""")
    parser.add_argument("srcPsl", type=str, help=""" input PSL, target must be srcAssembly""")
    parser.add_argument("srcAssembly", type=str, help="""source assembly name""")
    parser.add_argument("destAssembly", type=str, help="""destination assembly name""")
    parser.add_argument("destPsl", type=str, help="""output PSL, with query being original query and target being destAssembly""")
    return parser.parse_args()

runner = None

def pslToBed(srcPsl, srcBed):
    "create the bed required for HAL liftover"
    runner(["pslToBed", srcPsl, srcBed])

def halLiftover(hal, srcBed, srcAssembly, destAssembly, destGenomicPsl):
    "This uses a BED to create a PSL between the two genomes in the HAL file"
    runner(["halLiftover", "--tab", "--outPSLWithName", hal, srcAssembly, srcBed, destAssembly, destGenomicPsl])

def mapQueryToTransciptSpace(destGenomicPsl, srcPsl, destBlockPsl):
    "Map the query of the pairwise genomic alignments to the query."
    runner(["pslMap", "-mapFileWithInQName", srcPsl, destGenomicPsl, destBlockPsl])

def simpleChain(blockPsl, chainedPsl):
    "chain using the simpleChain program"
    runner(["simpleChain", "-outPsl", blockPsl, chainedPsl])

def filterPsl(chainedPsl, filteredPsl, filterInfo=None, localNearBest=None):
    "Run pslCdnaFilter, No filters will copy and create filterinfo"
    cmd = ["pslCDnaFilter", "-verbose=0"]
    if localNearBest != None:
        cmd.append("-localNearBest=" + str(localNearBest))
    if filterInfo != None:
        cmd.append("-statsOut=" + filterInfo)
    cmd += [chainedPsl, filteredPsl]
    runner(cmd)

def halTransMapPsl(args, interFiles):
    srcBed = interFiles.mkfile(".src.bed")
    pslToBed(args.srcPsl, srcBed)

    destGenomicPsl = interFiles.mkfile(".dest-genomic.psl")
    halLiftover(args.hal, srcBed, args.srcAssembly, args.destAssembly, destGenomicPsl)

    destBlockPsl = interFiles.mkfile(".dest-block.psl")
    mapQueryToTransciptSpace(destGenomicPsl, args.srcPsl, destBlockPsl)

    destChainedPsl = interFiles.mkfile(".dest-chained.psl")
    simpleChain(destBlockPsl, destChainedPsl)

    filterPsl(destChainedPsl, args.destPsl, filterInfo=args.filterInfo, localNearBest=args.localNearBestFilter)

args = cmdParse()
runner = ProgRunner(args.verbose)
interFiles = IntermediateFiles(args.intermediateFilePrefix)
halTransMapPsl(args, interFiles)
interFiles.delete()
