#!/usr/bin/env python

import argparse, os, sys
# program-relative import magic
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from transMapLib import IntermediateFiles, ProgRunner

description="""Implement TransMap algorithm on top of halLiftover
on top of a genePred file. This uses halTransMapPsl, with most options
passed through.
"""

def cmdParse():
    "parse command line and return arguments object"
    parser = argparse.ArgumentParser(description="""Take various files that indicate what is know about TARGET data and metadata and correlate into a report.""")
    parser.add_argument("--verbose", action="store_true", help="""trace execution""")
    parser.add_argument("--filterInfo", type=str, help="""write statistics about chained alignments to this file""")
    parser.add_argument("--intermediateFilePrefix", type=str, help="""save intermediate files naming with this prefix, normally they are created in TMPDIR and then purged""")
    parser.add_argument("--localNearBestFilter", type=float, help="""use this localNearBest filter of post-chained alignments""")
    parser.add_argument("hal", type=str, help="""HAL file containing alignments""")
    parser.add_argument("srcGenePred", type=str, help=""" input genePred on srcAssembly""")
    parser.add_argument("srcAssembly", type=str, help="""source assembly name""")
    parser.add_argument("destAssembly", type=str, help="""destination assembly name""")
    parser.add_argument("destPsl", type=str, help="""output PSL, with query being original query and target being destAssembly""")
    parser.add_argument("destGenePred", type=str, help="""output genePred on destination genome""")
    parser.add_argument("srcCds", type=str, help="""extracted CDS on src transcripts""")
    return parser.parse_args()

runner = None

def halSrcChromSizes(hal, srcAssembly, chromSizesFile):
    # output is lines like
    # chrF1, 68669167, 1047034, 0
    outputLines = runner.runOutput(["halStats", "--sequenceStats", srcAssembly, hal]).split("\n")
    with open(chromSizesFile, "w") as fh:
        for line in outputLines[1:]:  # skip header
            if len(line) > 0:
                chrom, sizeStr = line.split(", ")[0:2]
                fh.write(chrom + "\t" + sizeStr + "\n")

def genePredToPsl(srcGenePred, chromSizes, srcPsl, srcCds):
    runner(["genePredToFakePsl", "-chromSize="+chromSizes, "nodb", srcGenePred, srcPsl, srcCds])

def halTransMapPsl(args, srcPsl, destPsl):
    cmd = [myBinDir + "/halTransMapPsl"]
    # pull options from args
    for passThrough in ("verbose", "filterInfo", "intermediateFilePrefix", "localNearBestFilter"):
        val = getattr(args, passThrough)
        if isinstance(val, bool):
            cmd.append("--"+passThrough)
        elif isinstance(val, str):
            cmd.append("--"+passThrough+"="+val)
    cmd.extend([args.hal, srcPsl, args.srcAssembly, args.destAssembly, destPsl])
    runner(cmd)

def pslToGenePred(destPsl, srcCds, destGenePred):
    runner(["mrnaToGene", "-keepInvalid", "-quiet", "-genePredExt", "-insertMergeSize=0", "-cdsFile="+srcCds, destPsl, destGenePred])


def halTransMapGenePred(args, interFiles):
    chromSizesFile = interFiles.mkfile("chrom-sizes")
    halSrcChromSizes(args.hal, args.srcAssembly, chromSizesFile)
    srcPsl = interFiles.mkfile("src.psl")
    genePredToPsl(args.srcGenePred, chromSizesFile, srcPsl, args.srcCds)
    halTransMapPsl(args, srcPsl, args.destPsl)
    pslToGenePred(args.destPsl, args.srcCds, args.destGenePred)

args = cmdParse()
runner = ProgRunner(args.verbose)
interFiles = IntermediateFiles(args.intermediateFilePrefix)
halTransMapGenePred(args, interFiles)
interFiles.delete()
