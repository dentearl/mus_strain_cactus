#!/usr/bin/env python
"""
paralogs
23 June 2014

dent earl, dearl a soe ucsc edu

a filter for the msca project analysis pipeline.
scans Trascripts and PSLs for transcript alignments located in multiple
locations and labels them as paralogous.
"""
import sys
import lib_filter


def reduceTranscripts(transcripts):
  """ reduce the list of transcripts down to a list of Transcript objects
  where there is one list per NAME. Returns a dict of lists. Key is
  transcript name, value is list of transcripts
  """
  reduced = {}
  for t in transcripts:
    t_name = lib_filter.removeAlignmentNumber(t.name)
    reduced.setdefault(t_name, []).append(t)
  return reduced


def hasOkCopy(this, transcriptList):
  """ given a transcript THIS and a list of transcripts which contains
  THIS, determine if there is a non-THIS transcript that is OK.
  """
  count = 0
  for t in transcriptList:
    isOk = True
    if this == t:
      continue
    if t.annotations == []:
      count += 1
      continue
    for annot in t.annotations:
      for label in annot.labels:
        if (label != 'hasOkCopies' and
            label != 'hasBadCopies' and
            not label.startswith('count_')):
          isOk = False
    if isOk:
      # this transcript is ok
      count += 1
  return count


def hasBadCopy(this, transcriptList):
  """ given a transcript THIS and a list of transcripts which contains
  THIS, determine if there is a non-THIS transcript that is BAD.
  """
  # note there is code duplication here but this is sufficiently confusing when
  # written in a general fashion to justify duplication.
  count = 0
  for t in transcriptList:
    isBad = False
    if this == t:
      continue
    for annot in t.annotations:
      for label in annot.labels:
        if (label != 'hasOkCopies' and
            label != 'hasBadCopies' and
            not label.startswith('count_')):
          isBad = True
    if isBad:
      # this transcript is bad
      count += 1
  return count


def main():
  args = lib_filter.boilerplateArguments()
  transcripts = lib_filter.getTranscripts(
    args.geneCheckBed, args.geneCheckBedDetails)
  uniqueTranscripts = reduceTranscripts(transcripts)
  for t in transcripts:
    t_name = lib_filter.removeAlignmentNumber(t.name)
    count = hasOkCopy(t, uniqueTranscripts[t_name])
    if count:
      a = lib_filter.TranscriptAnnotation(t.chromosomeInterval, t.name, [])
      a.addLabel('hasOkCopies')
      a.addLabel('count_%d' % count)
      t.annotations.append(a)
    count = hasBadCopy(t, uniqueTranscripts[t_name])
    if count:
      a = lib_filter.TranscriptAnnotation(t.chromosomeInterval, t.name, [])
      a.addLabel('hasBadCoies')
      a.addLabel('count_%d' % count)
      t.annotations.append(a)
  lib_filter.writeAllBeds(transcripts, args)


if __name__ == '__main__':
  main()
