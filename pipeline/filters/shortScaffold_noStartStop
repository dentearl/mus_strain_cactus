#!/usr/bin/env python
"""
shortScaffold_noStartStop
6 June 2014

dent earl, dearl a soe ucsc edu

a filter for the msca project analysis pipeline.
scans Trascripts for bad transcripts that contain Ns.
"""
from argparse import ArgumentParser
import sys
import lib_filter


def hashkey(obj):
  """ given either a PslRow or Transcript, return a string to use as dict key.
  """
  if isinstance(obj, lib_filter.PslRow):
    return '%s_%s_%d_%d' % (obj.qName, obj.tName, obj.tStart, obj.tEnd)
  elif isinstance(obj, lib_filter.Transcript):
    return '%s_%s_%d_%d' % (obj.name, obj.chromosomeInterval.chromosome,
                            obj.chromosomeInterval.start,
                            obj.chromosomeInterval.stop)
  else:
    raise RuntimeError('Unknown object type: %s' % obj.__clas__)


def main():
  parser = ArgumentParser()
  lib_filter.initializeArguments(parser)
  args = parser.parse_args()
  lib_filter.checkArguments(args, parser)
  alignments = lib_filter.getAlignments(args.alignment)
  alignments_dict = {}
  for a in alignments:
    if hashkey(a) in alignments_dict:
      # currently first-come first-served. See docs/bugs.txt for this problem.
      continue
    alignments_dict[hashkey(a)] = a
  transcripts = lib_filter.getTranscripts(
    args.geneCheckBed, args.geneCheckBedDetails)
  for t in transcripts:
    for annot in t.annotations:
      if 'noStart' not in annot.labels and 'noStop' not in annot.labels:
        continue
      a_name = hashkey(t)
      if a_name not in alignments_dict:
        continue
      a = alignments_dict[a_name]
      if len(a.strand) > 1:
        # this code assumes the target is always positive strand.
        # for this project I believe this is true.
        assert a.strand[1] == '+'
      #####
      # If the query does not completely map to the target, mark it.
      if a.qSize != a.qEnd - a.qStart:
        annot.addLabel('alignmentPartialMap')
      #####
      # If the alignment starts or ends right on top of a transcript, mark it.
      if a.strand.startswith('+'):
        if 'noStart' in annot.labels and a.tStart == 0 and a.qStart != 0:
          # aligned: #  unaligned: -  whatever: .  edge: |
          # query  |---#####....
          # target    |#####....
          annot.addLabel('alignmentAbutsEdge')
        if 'noStop' in annot.labels and a.tEnd == a.tSize and a.qEnd != a.qSize:
          # query  ...######---|
          # target ...######|
          annot.addLabel('alignmentAbutsEdge')
      else:
        assert(a.strand.startswith('-'))
        if 'noStop' in annot.labels and a.tStart == 0 and a.qStart != 0:
          annot.addLabel('alignmentAbutsEdge')
        if ('noStart' in annot.labels and a.tEnd == a.tSize and
            a.qEnd != a.qSize):
          annot.addLabel('alignmentAbutsEdge')
      #####
      # Need a way to flag xscripts that fall off scaffold while in an intron.


  lib_filter.writeAllBeds(transcripts, args)


if __name__ == '__main__':
  main()
