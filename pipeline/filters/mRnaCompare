#!/usr/bin/env python
"""
mRnaCompare
7 August 2014

dent earl, dearl a soe ucsc edu

a filter for the msca project analysis pipeline.
Compares the mRNA sequences between the genome in question
and the original species to look for synonymous and
nonsynonymous mutations.
"""
import sys
import lib_filter


def alignmentCoversGene(psl, t, mRNALength):
  """ Given a PSLRow object and a TRANSCRIPT object, determine
  if the PSL target range fits with where the MRNA is in the transcript.
  """
  if psl.tStart > t.mRnaCoordinateToChromosome(0):
    return False
  if psl.tEnd < t.mRnaCoordinateToChromosome(mRNALength - 1):
    return False
  return True  # at the moment this isn't so much "True" as "Possibly"


def getCodon(transcript, codon_seq, codon_tup):
  """ Given a TRANSCRIPT, CODON_SEQ string, and CODON_TUP a tuple containing
  (codonNumber, withinCodonIndex), return the 3 nucleotide sequence
  corresponding to the CODON_TUP
  """

  return codon_seq[codon_tup[0] * 3:codon_tup[0] * 3 + 3]


def recordOutOfFrame(a, t, ot, p, outOfFrameStart, codon_seq, codon_tu, numIndels):
  """ Having discovered the end of an outOfFrame
  """
  start = min(outOfFrameStart, p)
  stop = max(outOfFrameStart, p) + 1
  i = start
  ot_start = a.targetCoordinateToQuery(i)
  while a.targetCoordinateToQuery(a.queryCoordinateToTarget(ot_start - 1)) is None:
    # back up the ot_start to the first instance of indel
    ot_start -= 1
  ot_start = ot.exonCoordinateToChromosome(ot_start)
  ot_stop = ot.exonCoordinateToChromosome(a.targetCoordinateToQuery(stop))
  annot = lib_filter.TranscriptAnnotation(
    lib_filter.ChromosomeInterval(
      t.chromosomeInterval.chromosome,
      start,
      stop,
      t.chromosomeInterval.strand),
    t.name, [])
  annot.addLabel('outOfFrame')
  # number of out of frame codons wrt transcript T
  numOOF_this = 1 + t.chromosomeCoordinateToCodon(stop)[0] - t.chromosomeCoordinateToCodon(start)[0]
  # number of out of frame codons wrt transcript OT
  numOOF_them = 1 + ot.chromosomeCoordinateToCodon(ot_stop)[0] - ot.chromosomeCoordinateToCodon(ot_start)[0]
  annot.addLabel('outOfFrameCodonsThis_%d' % numOOF_this)
  annot.addLabel('outOfFrameCodonsThem_%d' % numOOF_them)
  # number of frame shifting indels in OT
  annot.addLabel('frameShiftingIndels_%d' % numIndels)
  t.annotations.append(annot)


def searchMutation(t, ot, i, p_ot, codon_seq, original_codon_seq, mutated_codons):
  """ for a particular position, check to see if either the transcript T or
  original transcript OT has a mutation.
  """
  codon_tup = t.mRnaCoordinateToCodon(i)  # codon tuple
  o_codon_tup = ot.chromosomeCoordinateToCodon(p_ot)

  codon = getCodon(t, codon_seq, codon_tup)
  o_codon = getCodon(ot, original_codon_seq, o_codon_tup)
  aa = lib_filter.codonToAminoAcid(codon)  # amino acid
  o_aa = lib_filter.codonToAminoAcid(o_codon)  # original amino acid
  if codon_tup in mutated_codons:
    return
  mutated_codons.add(codon_tup)
  annot = lib_filter.TranscriptAnnotation(
    lib_filter.ChromosomeInterval(
      t.chromosomeInterval.chromosome,
      t.codonCoordinateToChromosome(codon_tup),
      t.codonCoordinateToChromosome(codon_tup) + 3,
      t.chromosomeInterval.strand),
    t.name, [])
  if aa != o_aa:
    annot.addLabel('nonsynon')
    # me first <-> then you
    annot.addLabel('%s.%s<->%s.%s' %
                   (codon, aa, o_codon, o_aa))
  else:
    annot.addLabel('synon')
    # me first <-> then you
    annot.addLabel('%s.%s<->%s.%s' % (codon, aa, o_codon, o_aa))
  t.annotations.append(annot)


def main():
  args = lib_filter.boilerplateArguments()
  original_seq_dict = lib_filter.getSequences(args.refSequence, upper=True)
  seq_dict = lib_filter.getSequences(args.sequence, upper=True)
  transcripts = lib_filter.getTranscripts(
    args.geneCheckBed, args.geneCheckBedDetails)
  original_transcripts = lib_filter.getTranscripts(
    args.originalGeneCheckBed, args.originalGeneCheckBedDetails)
  original_transcripts_dict = lib_filter.transcriptListToDict(
    original_transcripts, noDuplicates=True)
  alignments = lib_filter.getAlignments(args.alignment)
  alignments_dict = {}
  for a in alignments:
    key = '%s_%s' % (a.qName, a.tName)
    alignments_dict.setdefault(key, [])
    alignments_dict[key].append(a)
  for t in transcripts:
    if t.chromosomeInterval.chromosome not in seq_dict: continue
    ot = original_transcripts_dict[t.name]
    if ot.chromosomeInterval.chromosome not in original_seq_dict:
      continue
    t_seq = seq_dict[t.chromosomeInterval.chromosome]
    ot_seq = original_seq_dict[ot.chromosomeInterval.chromosome]
    codon_seq = t.getMRna(t_seq)
    original_codon_seq = ot.getMRna(ot_seq)
    if codon_seq == original_codon_seq:
      continue
    aa_seq = [lib_filter.codonToAminoAcid(c) for c
              in lib_filter.readCodons(codon_seq)]
    if aa_seq == []:
      continue
    if aa_seq[0] != 'Met':
      continue
    if aa_seq[-1] != 'Stop':
      continue
    o_aa_seq = [lib_filter.codonToAminoAcid(c) for c
              in lib_filter.readCodons(original_codon_seq)]
    key = '%s_%s' % (t.name, t.chromosomeInterval.chromosome)
    alignments = alignments_dict[key]
    if len(aa_seq) < 0.1 * len(o_aa_seq):
      continue
    mutated_codons = set()
    for a in alignments:
      if not alignmentCoversGene(a, t, len(codon_seq)):
        # if the psl does not cover the gene in question skip it
        continue
      outOfFrame = False  # keep track of when we go out and come into frame.
      outOfFrameStart = None
      outOfFrameCount = 0
      prevPositionWasNone = False  # keep track of the number of indels
      prevPositionWasJump = False  # keep track of the number of indels
      prevQ = None
      numIndels = 0
      for i in xrange(0, len(codon_seq)):
        p = t.mRnaCoordinateToChromosome(i)
        q = a.targetCoordinateToQuery(p)
        p_ot = ot.exonCoordinateToChromosome(q)
        if p is None or q is None or p_ot is None:
          # if any of the positions dont map, skip this position
          if p_ot is None and not prevPositionWasNone:
            prevPositionWasNone = True
            numIndels += 1
          continue
        if prevQ is not None and prevQ + 1 != q:
          # if there is an indel in the query sequence we'll only see it by
          # the q value jumping by greater than 1.
          numIndels += 1
        prevQ = q
        prevPositionWasNone = False
        if t_seq.getNucleotide(p) != ot_seq.getNucleotide(p_ot):
          # these nucleotides are different: there is a mutation
          searchMutation(t, ot, i, p_ot, codon_seq, original_codon_seq, mutated_codons)
        codon_tup = t.mRnaCoordinateToCodon(i)  # codon tuple
        o_codon_tup = ot.chromosomeCoordinateToCodon(p_ot)
        if not outOfFrame and ((o_codon_tup is None) or (codon_tup[1] != o_codon_tup[1])):
          # we just went out of frame
          outOfFrame = True
          outOfFrameStart = p
          outOfFrameCount += 1
        elif outOfFrame and ((o_codon_tup is not None) and (codon_tup[1] == o_codon_tup[1])):
          # we just came back into frame
          outOfFrame = False
          recordOutOfFrame(a, t, ot, p, outOfFrameStart, codon_seq, codon_tup, numIndels)
          numIndels = 0
      if outOfFrame:
        # was still out of frame at the end of the mRna
        outOfFrame = False
        recordOutOfFrame(
          a, t, ot, p, outOfFrameStart, codon_seq, codon_tup, numIndels)
        numIndels = 0
  lib_filter.writeAllBeds(transcripts, args)


if __name__ == '__main__':
  main()
